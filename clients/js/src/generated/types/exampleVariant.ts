/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  tuple,
  u16,
  u32,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type ExampleVariant =
  | { __kind: 'Zero'; fields: [number] }
  | { __kind: 'One'; fields: [number] }
  | { __kind: 'Two'; fields: [number] }
  | { __kind: 'Three'; fields: [bigint] }
  | { __kind: 'Four'; fields: [PublicKey] };

export type ExampleVariantArgs =
  | { __kind: 'Zero'; fields: [number] }
  | { __kind: 'One'; fields: [number] }
  | { __kind: 'Two'; fields: [number] }
  | { __kind: 'Three'; fields: [number | bigint] }
  | { __kind: 'Four'; fields: [PublicKey] };

export function getExampleVariantSerializer(): Serializer<
  ExampleVariantArgs,
  ExampleVariant
> {
  return dataEnum<ExampleVariant>(
    [
      [
        'Zero',
        struct<GetDataEnumKindContent<ExampleVariant, 'Zero'>>([
          ['fields', tuple([u8()])],
        ]),
      ],
      [
        'One',
        struct<GetDataEnumKindContent<ExampleVariant, 'One'>>([
          ['fields', tuple([u16()])],
        ]),
      ],
      [
        'Two',
        struct<GetDataEnumKindContent<ExampleVariant, 'Two'>>([
          ['fields', tuple([u32()])],
        ]),
      ],
      [
        'Three',
        struct<GetDataEnumKindContent<ExampleVariant, 'Three'>>([
          ['fields', tuple([u64()])],
        ]),
      ],
      [
        'Four',
        struct<GetDataEnumKindContent<ExampleVariant, 'Four'>>([
          ['fields', tuple([publicKeySerializer()])],
        ]),
      ],
    ],
    { description: 'ExampleVariant' }
  ) as Serializer<ExampleVariantArgs, ExampleVariant>;
}

// Data Enum Helpers.
export function exampleVariant(
  kind: 'Zero',
  data: GetDataEnumKindContent<ExampleVariantArgs, 'Zero'>['fields']
): GetDataEnumKind<ExampleVariantArgs, 'Zero'>;
export function exampleVariant(
  kind: 'One',
  data: GetDataEnumKindContent<ExampleVariantArgs, 'One'>['fields']
): GetDataEnumKind<ExampleVariantArgs, 'One'>;
export function exampleVariant(
  kind: 'Two',
  data: GetDataEnumKindContent<ExampleVariantArgs, 'Two'>['fields']
): GetDataEnumKind<ExampleVariantArgs, 'Two'>;
export function exampleVariant(
  kind: 'Three',
  data: GetDataEnumKindContent<ExampleVariantArgs, 'Three'>['fields']
): GetDataEnumKind<ExampleVariantArgs, 'Three'>;
export function exampleVariant(
  kind: 'Four',
  data: GetDataEnumKindContent<ExampleVariantArgs, 'Four'>['fields']
): GetDataEnumKind<ExampleVariantArgs, 'Four'>;
export function exampleVariant<K extends ExampleVariantArgs['__kind']>(
  kind: K,
  data?: any
): Extract<ExampleVariantArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isExampleVariant<K extends ExampleVariant['__kind']>(
  kind: K,
  value: ExampleVariant
): value is ExampleVariant & { __kind: K } {
  return value.__kind === kind;
}
